/**
 * This is an example of how to create a template that makes use of streams data.
 * The stream data originates from Yext's Knowledge Graph. When a template in
 * concert with a stream is built by the Yext Sites system, a static html page
 * is generated for every corresponding (based on the filter) stream document.
 *
 * Another way to think about it is that a page will be generated using this
 * template for every eligible entity in your Knowledge Graph.
 */

 import * as React from "react";
 import Banner from "../components/banner";
 import Header from "../components/header";
 import Footer from "../components/footer";
 import Cta from "../components/cta";
 import List from "../components/list";
 import Hours from "../components/hours";

 import Promo from '../components/promo';
 import Doctors from '../components/doctors';
 import FeaturedServices from '../components/featured-services';
 import OfferedServices from '../components/offered-services';
 import Insurances from '../components/insurances';
 
 import Markdown from 'markdown-to-jsx';
 
 import "../index.css";
 import {
   Default,
   GetPath,
   TemplateConfig,
   TemplateProps,
   GetHeadConfig,
   HeadConfig,
 } from "@yext/yext-sites-scripts";
 
 /**
  * Required when Knowledge Graph data is used for a template.
  */
 export const config: TemplateConfig = {
   stream: {
     $id: "index-stream",
     fields: [
       'id',
       'uid',
       'meta',
       'name',
       'address',
       'hours',
       'mainPhone',
       'geocodedCoordinate',
       'logo',
       'photoGallery',
       'insuranceAccepted',
       'websiteUrl',
       'c_primaryColor',
       'c_secondaryColor',
       'c_richTextDescription',
       'c_featuredServices.id',
       'c_featuredServices.name',
       'c_featuredServices.description',
       'c_featuredServices.slug',
       'c_meetTheDoctors.name',
       'c_meetTheDoctors.headshot',
       'c_promotion',
     ],
     filter: {
       savedFilterIds: [
         '933983808'
       ],
     },
     localization: {
       locales: ["en"],
       primary: false,
     },
   },
 };
 
/**
 * Defines the path that the generated file will live at for production.
 *
 * NOTE: This currently has no impact on the local dev path. Local dev urls currently
 * take on the form: featureName/entityId
 */
 export const getPath: GetPath<TemplateProps> = (props) => {
  return `index.html`;
};
 
/**
 * This allows the user to define a function which will take in their template
 * data and procude a HeadConfig object. When the site is generated, the HeadConfig
 * will be used to generate the inner contents of the HTML document's <head> tag.
 * This can include the title, meta tags, script tags, etc.
 */
 export const getHeadConfig: GetHeadConfig<TemplateProps> = (props): HeadConfig => {
   return {
     title: props.document.name,
     charset: "UTF-8",
     viewport: "width=device-width, initial-scale=1",
     tags: [
       {
         type: "meta",
         attributes: {
           description: "This site was generated by the Yext SSG",
         },
       },
     ],
   };
 };
 
 /**
  * This is the main template. It can have any name as long as it's the default export.
  * The props passed in here are the direct stream document defined by `config`.
  *
  * There are a bunch of custom components being used from the src/components folder. These are
  * an example of how you could create your own. You can set up your folder structure for custom
  * components any way you'd like as long as it lives in the src folder (though you should not put
  * them in the src/templates folder as this is specific for true template files).
  */
 const Index: Default<TemplateProps> = (props) => {
   const { document } = props;
   const {
     _site,
     name,
     address,
     description,
     c_richTextDescription,
     hours,
     mainPhone,
     geocodedCoordinate,
     logo,
     photoGallery,
     insuranceAccepted,
     c_primaryColor,
     c_secondaryColor,
     websiteUrl,
     c_featuredServices,
     c_meetTheDoctors,
     c_promotion
   } = document;
   console.log(document);
 
   return (
     <>
       <body className="fonty-main">
         <Header name={name} primaryColor={_site.c_primaryColor} secondaryColor={_site.c_secondaryColor} logo={_site.c_logoURL} address={_site.c_relatedFacility[0].address}></Header>
         <Banner name={name} secondaryColor="blue" photo={photoGallery[0].image.url} mainPhone={mainPhone}></Banner>
         {c_promotion && <Promo text={c_promotion}></Promo>}
          <div className="centered-container">
            <Doctors doctors={c_meetTheDoctors}></Doctors>
            <FeaturedServices name={name} services={c_featuredServices} address={address} phone={mainPhone}></FeaturedServices>
            <OfferedServices services={_site.c_featuredServices}></OfferedServices>
            <Insurances list={insuranceAccepted}></Insurances>
            <div className="section space-y-5">
            <Markdown className="space-y-5">{c_richTextDescription}</Markdown>
          </div>
        </div>
         <Footer footer={_site.c_footer}></Footer>
       </body>
     </>
   );
 };
 
 export default Index;
 
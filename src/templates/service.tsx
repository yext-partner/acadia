/**
 * This is an example of how to create a template that makes use of streams data.
 * The stream data originates from Yext's Knowledge Graph. When a template in
 * concert with a stream is built by the Yext Sites system, a static html page
 * is generated for every corresponding (based on the filter) stream document.
 *
 * Another way to think about it is that a page will be generated using this
 * template for every eligible entity in your Knowledge Graph.
 */

 import * as React from "react";
 import Banner from "../components/banner";
 import Header from "../components/header";
 import Footer from "../components/footer";
 import Cta from "../components/cta";
 import List from "../components/list";
 import Hours from "../components/hours";
 
 import Doctors from '../components/doctors';
 import Services from '../components/featured-services';
 import Insurances from '../components/insurances';

 import ReactMarkdown from 'react-markdown';
 import Markdown from 'markdown-to-jsx';
 
 import "../index.css";
 import {
   Default,
   GetPath,
   TemplateConfig,
   TemplateProps,
   GetHeadConfig,
   HeadConfig,
 } from "@yext/yext-sites-scripts";
 

 export const config: TemplateConfig = {
   stream: {
     $id: "services-stream",
     filter: {
      savedFilterIds: [
        '935268770'
      ],
    },
     fields: [
       "id",
       "uid",
       "meta",
       "name",
       "slug",
       "description",
       "richTextDescription",
       "c_legalApproved",
       "c_parentTopic.name",
       "c_parentTopic.slug",
       "c_parentTopic.id",
     ],
     localization: {
       locales: ["en"],
       primary: false,
     },
   },
 };
 
 export const getPath: GetPath<TemplateProps> = (props) => {
   return `${props.document.slug.toString()}`;
 };
 
 export const getHeadConfig: GetHeadConfig<TemplateProps> = (props): HeadConfig => {
   return {
     title: props.document.name,
     charset: "UTF-8",
     viewport: "width=device-width, initial-scale=1",
     tags: [
       {
         type: "meta",
         attributes: {
           description: "This site was generated by the Yext SSG",
         },
       },
     ],
   };
 };
 

 const Service: Default<TemplateProps> = (props) => {
   const { document } = props;
   const {
     _site,
     name,
     description,
     richTextDescription,
     logo,
     c_legalApproved,
     c_parentTopic,
   } = document;
   
   var updatedRTD = richTextDescription;
   updatedRTD = updatedRTD.replaceAll("{{name}}", _site.c_relatedFacility[0].name);
   updatedRTD = updatedRTD.replaceAll("{{address.city}}", _site.c_relatedFacility[0].address.city);
   updatedRTD = updatedRTD.replaceAll("{{address.region}}", _site.c_relatedFacility[0].address.region);
   updatedRTD = updatedRTD.replaceAll("{{mainPhone}}", _site.c_relatedFacility[0].mainPhone);

   return (
     <>
       <body className="font-main">
         <Header site={_site}></Header>
           <div className="centered-container">
            <div className="breadcrumbs flex space-x-5 py-5">
              <a href="/" className="font-semibold hover:underline">Home</a>
              <span>/</span>
              <span>{name}</span>
            </div>
            <div className="section space-y-5">
              <h1 className="text-center">{name}</h1>
              <Markdown className="space-y-5">{updatedRTD}</Markdown>
            </div>
           </div>
         <Footer footer={_site.c_footer}></Footer>
       </body>
     </>
   );
 };
 
 export default Service;
 
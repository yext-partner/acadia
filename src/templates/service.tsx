/**
 * This is an example of how to create a template that makes use of streams data.
 * The stream data originates from Yext's Knowledge Graph. When a template in
 * concert with a stream is built by the Yext Sites system, a static html page
 * is generated for every corresponding (based on the filter) stream document.
 *
 * Another way to think about it is that a page will be generated using this
 * template for every eligible entity in your Knowledge Graph.
 */

 import * as React from "react";
 import Banner from "../components/banner";
 import Header from "../components/header";
 import Footer from "../components/footer";
 import Cta from "../components/cta";
 import List from "../components/list";
 import Hours from "../components/hours";
 
 import Doctors from '../components/doctors';
 import Services from '../components/featured-services';
 import Insurances from '../components/insurances';

 import ReactMarkdown from 'react-markdown';
 import Markdown from 'markdown-to-jsx';
 
 import "../index.css";
 import {
   Default,
   GetPath,
   TemplateConfig,
   TemplateProps,
   GetHeadConfig,
   HeadConfig,
 } from "@yext/yext-sites-scripts";
 
 /**
  * Required when Knowledge Graph data is used for a template.
  */
 export const config: TemplateConfig = {
   stream: {
     $id: "services-stream",
     // Specifies the exact data that each generated document will contain. This data is passed in
     // directly as props to the default exported function.
     fields: [
       "id",
       "uid",
       "meta",
       "name",
       "slug",
       "description",
       "richTextDescription",
       "c_legalApproved",
       "c_parentTopic.name",
       "c_parentTopic.slug",
       "c_parentTopic.id",
     ],
     // Defines the scope of entities that qualify for this stream.
     filter: {
       savedFilterIds: [
         '935268770'
       ],
     },
     // The entity language profiles that documents will be generated for.
     localization: {
       locales: ["en"],
       primary: false,
     },
   },
 };
 
 /**
  * Defines the path that the generated file will live at for production.
  *
  * NOTE: This currently has no impact on the local dev path. Local dev urls currently
  * take on the form: featureName/entityId
  */
 export const getPath: GetPath<TemplateProps> = (props) => {
   return `${props.document.id.toString()}`;
 };
 
 /**
  * This allows the user to define a function which will take in their template
  * data and procude a HeadConfig object. When the site is generated, the HeadConfig
  * will be used to generate the inner contents of the HTML document's <head> tag.
  * This can include the title, meta tags, script tags, etc.
  */
 export const getHeadConfig: GetHeadConfig<TemplateProps> = (props): HeadConfig => {
   return {
     title: props.document.name,
     charset: "UTF-8",
     viewport: "width=device-width, initial-scale=1",
     tags: [
       {
         type: "meta",
         attributes: {
           description: "This site was generated by the Yext SSG",
         },
       },
     ],
   };
 };
 
 /**
  * This is the main template. It can have any name as long as it's the default export.
  * The props passed in here are the direct stream document defined by `config`.
  *
  * There are a bunch of custom components being used from the src/components folder. These are
  * an example of how you could create your own. You can set up your folder structure for custom
  * components any way you'd like as long as it lives in the src folder (though you should not put
  * them in the src/templates folder as this is specific for true template files).
  */
 const Service: Default<TemplateProps> = (props) => {
   const { document } = props;
   const {
     _site,
     name,
     description,
     richTextDescription,
     logo,
     c_legalApproved,
     c_parentTopic,
   } = document;
   
   var updatedRTD = richTextDescription;
   updatedRTD = updatedRTD.replaceAll("{{name}}", _site.c_relatedFacility[0].name);
   updatedRTD = updatedRTD.replaceAll("{{address.city}}", _site.c_relatedFacility[0].address.city);
   updatedRTD = updatedRTD.replaceAll("{{address.region}}", _site.c_relatedFacility[0].address.region);
   updatedRTD = updatedRTD.replaceAll("{{mainPhone}}", _site.c_relatedFacility[0].mainPhone);

   return (
     <>
       <body className="font-main">
         <Header name={name} primaryColor={_site.c_primaryColor} secondaryColor={_site.c_secondaryColor} logo={_site.c_logoURL} address={_site.c_relatedFacility[0].address}></Header>
           <div className="centered-container">
            <div className="breadcrumbs flex space-x-5 py-5">
              <a href="/" className="font-semibold hover:underline">Home</a>
              <span>/</span>
              <span>{name}</span>
            </div>
            <div className="section space-y-5">
              <h1 className="text-center">{name}</h1>
              <Markdown className="space-y-5">{updatedRTD}</Markdown>
            </div>
           </div>
         <Footer footer={_site.c_footer}></Footer>
       </body>
     </>
   );
 };
 
 export default Service;
 